--------------------------------------------------
- Tentative d'offrir trois événements dans la classe Perspective
--------------------------------------------------

Lorsqu'est venu le temps de mettre en place le patron "Observeur", nous nous sommes heurtés à plusieurs problèmes. Ayant déjà travaillés avec des languages tel VB.Net et C++, qui permettent un contrôle plus fin des observeur et observables, nous avons eu de la difficulté à travailler ave la façon Java demandant que notre classe pouvant être observée hérite de la classe "Observable".

En effet, nous souhaitions offrir la flexibilité aux observeurs de s'abonner à l'événement de leur choix, comme pour la classe "Button" du framework .Net. Cette classe offre plusieurs événements et le code l'utilisant peut décider de s'abonner à un ou plusieurs événements dépendamment de leurs besoins.

Nous souhaitions offrir la possibilité à des observateur éventuels d'être prévenus en cas de modification de l'image, du zoom et de la position de la classe "Perspective". Le problème est que la classe "Observable" de la bibliothèque standard Java est prévue pour que nous en hérition, ce qui ne permet d'offrir qu'un seul événement, et que nous ne pouvons pas en composer plusieurs instances puisque nous ne pouvons pas déclancher un événement de l'extérieur de la classe. Pour contourner ce problème, nous avons décidés d'écrire trois classe héritant de la classe "Observable" et de modifier la visibilité de la fonction "setChanged". Une fois celle-ci accessible de l'extérieure, il devenait possible de composer trois instances de ces classes et d'offrir aux éventuels observeurs le choix de l'événement auquel s'abonner.

Un autre problème est survenu au moment d'abonner des observeurs à ces événemnts. Nous souhaitions que différentes méthodes d'une même classe réagissent à différents événement. Seulement, une classe ne peut implémenter qu'une seule fois le type inteface "Observer". Pour régler ce problème, une première solution aurait pu consister à mettre une grosse structure conditionnelle (if/else, switch, etc.) dans la méthode "update" et d'appeler la bonne méthode à partir de cet endroit. Le problème avec cette solution est que cela implique un fort couplage entre l'observeur et les différents méthodes. De plus, cela revient à complètement annuler la flexibilité de s'abonner à différents événements.

Après discussion avec Sébastien Adam, nous nous sommes penchés sur une seconde solution consistant à transformer toute méthode souhaitant s'abonner à un événement en une classe privée interne implémentant le type interface "Observer". Il devient alors possible d'abonner différents observeur à différents événements. Le problème avec cette solution est que nous devons alors écrire et instancier de nombreuses classes pour remplacer de simple méthodes. À grande échelle, cette solution pourrait être assez lourde.
